import random

def print_board(board):
    """Prints the Tic-Tac-Toe board."""
    print(f"\n {board[0]} | {board[1]} | {board[2]} ")
    print("-----------")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("-----------")
    print(f" {board[6]} | {board[7]} | {board[8]} \n")

def check_win(board, player):
    """Checks if the given player has won."""
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    for condition in win_conditions:
        if board[condition[0]] == player and board[condition[1]] == player and board[condition[2]] == player:
            return True
    return False

def check_tie(board):
    """Checks if the game is a tie."""
    return " " not in board

def get_empty_cells(board):
    """Returns a list of empty cell indices."""
    return [i for i, cell in enumerate(board) if cell == " "]

def minimax(board, depth, is_maximizing_player):
    """Minimax algorithm for AI decision making."""
    if check_win(board, "X"):  # User wins
        return -10
    if check_win(board, "O"):  # System wins
        return 10
    if check_tie(board):
        return 0

    if is_maximizing_player:
        best_score = -float('inf')
        for move in get_empty_cells(board):
            board[move] = "O"
            score = minimax(board, depth + 1, False)
            board[move] = " "  # Undo the move
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for move in get_empty_cells(board):
            board[move] = "X"
            score = minimax(board, depth + 1, True)
            board[move] = " "  # Undo the move
            best_score = min(best_score, score)
        return best_score

def system_move(board):
    """Determines the system's best move using Minimax."""
    best_score = -float('inf')
    best_move = -1
    for move in get_empty_cells(board):
        board[move] = "O"
        score = minimax(board, 0, False)
        board[move] = " "
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

def play_game():
    """Main function to play Tic-Tac-Toe."""
    board = [" "] * 9
    current_player = "X"  # User starts

    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        if current_player == "X":
            try:
                user_input = int(input("Enter your move (1-9): ")) - 1
                if user_input < 0 or user_input > 8 or board[user_input] != " ":
                    print("Invalid move. Please choose an empty position between 1 and 9.")
                    continue
                board[user_input] = "X"
            except ValueError:
                print("Invalid input. Please enter a number between 1 and 9.")
                continue
        else:
            print("System's turn...")
            move = system_move(board)
            board[move] = "O"

        print_board(board)

        if check_win(board, current_player):
            print(f"{current_player} wins!")
            break
        elif check_tie(board):
            print("It's a tie!")
            break

        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    play_game()
